defmodule MyXDR.MyStruct do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `MyStruct` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.{ 
    build_type(Int),
    Int64,
    build_type(FixedOpaque, 10),
    build_type(XDR.String, ),
    build_type(XDR.String, 100)
  } 

  @struct_spec XDR.Struct.new(
    someInt: build_type(Int),
    aBigInt: Int64,
    someOpaque: build_type(FixedOpaque, 10),
    someString: build_type(XDR.String, ),
    maxString: build_type(XDR.String, 100)
  )

  @type someInt :: build_type(Int).t()
  @type aBigInt :: Int64.t()
  @type someOpaque :: build_type(FixedOpaque, 10).t()
  @type someString :: build_type(XDR.String, ).t()
  @type maxString :: build_type(XDR.String, 100).t()

  @type t :: %__MODULE__{
    someInt: someInt(),
    aBigInt: aBigInt(),
    someOpaque: someOpaque(),
    someString: someString(),
    maxString: maxString()
  }

  defstruct [
    :someInt,
    :aBigInt,
    :someOpaque,
    :someString,
    :maxString
  ]

  @spec new(
    someInt :: someInt(),
    aBigInt :: aBigInt(),
    someOpaque :: someOpaque(),
    someString :: someString(),
    maxString :: maxString()
  ) :: t()

  def new(
    %build_type(Int){} = someInt,
    %Int64{} = aBigInt,
    %build_type(FixedOpaque, 10){} = someOpaque,
    %build_type(XDR.String, ){} = someString,
    %build_type(XDR.String, 100){} = maxString
  ),

  do: %__MODULE__{
    someInt: someInt,
    aBigInt: aBigInt,
    someOpaque: someOpaque,
    someString: someString,
    maxString: maxString
  }

  @impl true
  def encode_xdr(%__MODULE__{
    someInt: someInt,
    aBigInt: aBigInt,
    someOpaque: someOpaque,
    someString: someString,
    maxString: maxString
  }) do 
    [
    someInt: someInt,
    aBigInt: aBigInt,
    someOpaque: someOpaque,
    someString: someString,
    maxString: maxString
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end 

  @impl true
  def encode_xdr!(%__MODULE__{
    someInt: someInt,
    aBigInt: aBigInt,
    someOpaque: someOpaque,
    someString: someString,
    maxString: maxString
  }) do 
    [
    someInt: someInt,
    aBigInt: aBigInt,
    someOpaque: someOpaque,
    someString: someString,
    maxString: maxString
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end 

  @impl true 
  def decode_xdr(bytes, struct \\ @struct_spec) 

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [
        someInt: someInt,
        aBigInt: aBigInt,
        someOpaque: someOpaque,
        someString: someString,
        maxString: maxString
      ]}, rest}} -> 
        {:ok, {new(someInt,aBigInt,someOpaque,someString,maxString), rest}}
      error -> error
    end
  end 

  @impl true 
  def decode_xdr!(bytes, struct \\ @struct_spec) 

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [
      someInt: someInt,
      aBigInt: aBigInt,
      someOpaque: someOpaque,
      someString: someString,
      maxString: maxString
    ]}, rest} = 
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(
      someInt,
      aBigInt,
      someOpaque,
      someString,
      maxString
    ), rest}
  end
end
