defmodule MyXDR.HasOptions do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `HasOptions` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.{ 
    OptionalInt,
    OptionalInt,
    OptionalArr
  } 

  @struct_spec XDR.Struct.new(
    firstOption: OptionalInt,
    secondOption: OptionalInt,
    thirdOption: OptionalArr
  )

  @type firstOption :: OptionalInt.t()
  @type secondOption :: OptionalInt.t()
  @type thirdOption :: OptionalArr.t()

  @type t :: %__MODULE__{
    firstOption: firstOption(),
    secondOption: secondOption(),
    thirdOption: thirdOption()
  }

  defstruct [
    :firstOption,
    :secondOption,
    :thirdOption
  ]

  @spec new(
    firstOption :: firstOption(),
    secondOption :: secondOption(),
    thirdOption :: thirdOption()
  ) :: t()

  def new(
    %OptionalInt{} = firstOption,
    %OptionalInt{} = secondOption,
    %OptionalArr{} = thirdOption
  ),

  do: %__MODULE__{
    firstOption: firstOption,
    secondOption: secondOption,
    thirdOption: thirdOption
  }

  @impl true
  def encode_xdr(%__MODULE__{
    firstOption: firstOption,
    secondOption: secondOption,
    thirdOption: thirdOption
  }) do 
    [
    firstOption: firstOption,
    secondOption: secondOption,
    thirdOption: thirdOption
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end 

  @impl true
  def encode_xdr!(%__MODULE__{
    firstOption: firstOption,
    secondOption: secondOption,
    thirdOption: thirdOption
  }) do 
    [
    firstOption: firstOption,
    secondOption: secondOption,
    thirdOption: thirdOption
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end 

  @impl true 
  def decode_xdr(bytes, struct \\ @struct_spec) 

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [
        firstOption: firstOption,
        secondOption: secondOption,
        thirdOption: thirdOption
      ]}, rest}} -> 
        {:ok, {new(firstOption,secondOption,thirdOption), rest}}
      error -> error
    end
  end 

  @impl true 
  def decode_xdr!(bytes, struct \\ @struct_spec) 

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [
      firstOption: firstOption,
      secondOption: secondOption,
      thirdOption: thirdOption
    ]}, rest} = 
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(
      firstOption,
      secondOption,
      thirdOption
    ), rest}
  end
end
