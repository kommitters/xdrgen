defmodule MyXDR.OptHash2 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `OptHash2` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.OptHash2

  @optional_spec XDR.Optional.new(OptHash2)

  @type opt_hash2 :: OptHash2.t() | nil

  @type t :: %__MODULE__{opt_hash2: opt_hash2()}

  defstruct [:opt_hash2]

  @spec new(opt_hash2 :: opt_hash2()) :: t()
  def new(opt_hash2 \\ nil), do: %__MODULE__{opt_hash2: opt_hash2}

  @impl true
  def encode_xdr(%__MODULE__{opt_hash2: opt_hash2}) do
    opt_hash2
    |> XDR.Optional.new()
    |> XDR.Optional.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{opt_hash2: opt_hash2}) do
    opt_hash2
    |> XDR.Optional.new()
    |> XDR.Optional.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, optional_spec \\ @optional_spec)

  def decode_xdr(bytes, optional_spec) do
    case XDR.Optional.decode_xdr(bytes, optional_spec) do
      {:ok, {%XDR.Optional{type: opt_hash2}, rest}} -> {:ok, {new(opt_hash2), rest}}
      {:ok, {nil, rest}} -> {:ok, {new(), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, optional_spec \\ @optional_spec)

  def decode_xdr!(bytes, optional_spec) do
    {%XDR.Optional{identifier: opt_hash2}, rest} = XDR.Optional.decode_xdr!(bytes)
    {new(opt_hash2), rest}
    {nil, rest} -> {new(), rest}
  end
end
