defmodule MyXDR.NesterNestedUnion do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `NesterNestedUnion` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.{
    Color,
    Void,
    Int
  }

  @arms [
    RED: Void,
    default: Int
  ]

  @type nester_nested_union ::
          Void.t()
          | Int.t()
          | any()

  @type t :: %__MODULE__{nester_nested_union: nester_nested_union(), type: Color.t()}

  defstruct [:nester_nested_union, :type]

  @spec new(nester_nested_union :: nester_nested_union(), type :: Color.t()) :: t()
  def new(nester_nested_union, %Color{} = type), do: %__MODULE__{nester_nested_union: nester_nested_union, type: type}

  @impl true
  def encode_xdr(%__MODULE__{nester_nested_union: nester_nested_union, type: type}) do
    type
    |> XDR.Union.new(@arms, nester_nested_union)
    |> XDR.Union.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{nester_nested_union: nester_nested_union, type: type}) do
    type
    |> XDR.Union.new(@arms, nester_nested_union)
    |> XDR.Union.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, spec \\ union_spec())

  def decode_xdr(bytes, spec) do
    case XDR.Union.decode_xdr(bytes, spec) do
      {:ok, {{type, nester_nested_union}, rest}} -> {:ok, {new(nester_nested_union, type), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, spec \\ union_spec())

  def decode_xdr!(bytes, spec) do
    {{type, nester_nested_union}, rest} = XDR.Union.decode_xdr!(bytes, spec)
    {new(nester_nested_union, type), rest}
  end

  @spec union_spec() :: XDR.Union.t()
  defp union_spec do
    nil
    |> Color.new()
    |> XDR.Union.new(@arms)
  end
end
