defmodule MyXDR.Hashes3 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `Hashes3` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.Hash

  @array_type Hash

  @array_spec %{type: @array_type}

  @type t :: %__MODULE__{hashs: list(Hash.t())}

  defstruct [:hashs]

  @spec new(hashs :: list(Hash.t())) :: t()
  def new(hashs), do: %__MODULE__{hashs: hashs}

  @impl true
  def encode_xdr(%__MODULE__{hashs: hashs}) do
    hashs
    |> XDR.VariableArray.new(@array_type)
    |> XDR.VariableArray.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{hashs: hashs}) do
    hashs
    |> XDR.VariableArray.new(@array_type)
    |> XDR.VariableArray.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, spec \\ @array_spec)

  def decode_xdr(bytes, spec) do
    case XDR.VariableArray.decode_xdr(bytes, spec) do
      {:ok, {hashs, rest}} -> {:ok, {new(hashs), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, spec \\ @array_spec)

  def decode_xdr!(bytes, spec) do
    {hashs, rest} = XDR.VariableArray.decode_xdr!(bytes, spec)
    {new(hashs), rest}
  end
end
