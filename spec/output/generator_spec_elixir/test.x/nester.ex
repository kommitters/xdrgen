defmodule MyXDR.Nester do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `Nester` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.{ 
    NesterNestedEnum,
    NesterNestedStruct,
    NesterNestedUnion
  } 

  @struct_spec XDR.Struct.new(
    nestedEnum: NesterNestedEnum,
    nestedStruct: NesterNestedStruct,
    nestedUnion: NesterNestedUnion
  )

  @type nestedEnum :: NesterNestedEnum.t()
  @type nestedStruct :: NesterNestedStruct.t()
  @type nestedUnion :: NesterNestedUnion.t()

  @type t :: %__MODULE__{
    nestedEnum: nestedEnum(),
    nestedStruct: nestedStruct(),
    nestedUnion: nestedUnion()
  }

  defstruct [
    :nestedEnum,
    :nestedStruct,
    :nestedUnion
  ]

  @spec new(
    nestedEnum :: nestedEnum(),
    nestedStruct :: nestedStruct(),
    nestedUnion :: nestedUnion()
  ) :: t()

  def new(
    %NesterNestedEnum{} = nestedEnum,
    %NesterNestedStruct{} = nestedStruct,
    %NesterNestedUnion{} = nestedUnion
  ),

  do: %__MODULE__{
    nestedEnum: nestedEnum,
    nestedStruct: nestedStruct,
    nestedUnion: nestedUnion
  }

  @impl true
  def encode_xdr(%__MODULE__{
    nestedEnum: nestedEnum,
    nestedStruct: nestedStruct,
    nestedUnion: nestedUnion
  }) do 
    [
    nestedEnum: nestedEnum,
    nestedStruct: nestedStruct,
    nestedUnion: nestedUnion
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end 

  @impl true
  def encode_xdr!(%__MODULE__{
    nestedEnum: nestedEnum,
    nestedStruct: nestedStruct,
    nestedUnion: nestedUnion
  }) do 
    [
    nestedEnum: nestedEnum,
    nestedStruct: nestedStruct,
    nestedUnion: nestedUnion
    ]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end 

  @impl true 
  def decode_xdr(bytes, struct \\ @struct_spec) 

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [
        nestedEnum: nestedEnum,
        nestedStruct: nestedStruct,
        nestedUnion: nestedUnion
      ]}, rest}} -> 
        {:ok, {new(nestedEnum,nestedStruct,nestedUnion), rest}}
      error -> error
    end
  end 

  @impl true 
  def decode_xdr!(bytes, struct \\ @struct_spec) 

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [
      nestedEnum: nestedEnum,
      nestedStruct: nestedStruct,
      nestedUnion: nestedUnion
    ]}, rest} = 
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(
      nestedEnum,
      nestedStruct,
      nestedUnion
    ), rest}
  end
end
