defmodule MyXDR do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr
  """

  comment ~S"""
  XDR Source Code::

      enum AccountFlags
      { // masks for each flag
          AUTH_REQUIRED_FLAG = 0x1
      };
  """

  defmodule AccountFlags do
    @moduledoc """
    Representation of Stellar `AccountFlags` type.
    """

    @behaviour XDR.Declaration

    @declarations [
      AUTH_REQUIRED_FLAG: 1
    ]

    @enum_spec %XDR.Enum{declarations: @declarations, indentifier: nil}

    @type t :: %__MODULE__{identifier: atom()}

    defstruct [:identifier]

    @spec new(type :: atom()) :: t()
    def new(type \\ :AUTH_REQUIRED_FLAG), do: %__MODULE__{identifier: type}

    @impl true
    def encode_xdr(%__MODULE__{identifier: type}), do:
      @declarations
      |> XDR.Enum.new(type)
      |> XDR.Enum.encode_xdr()

    @impl true
    def encode_xdr!(%__MODULE__{identifier: type}), do:
      @declarations
      |> XDR.Enum.new(type)
      |> XDR.Enum.encode_xdr!()

    @impl true
    def decode_xdr(bytes, spec \\ @enum_spec)

    def decode_xdr(bytes, spec) do:
      case XDR.Enum.decode_xdr(bytes, spec) do
        {:ok, {%XDR.Enum{identifier: type}, rest}} -> {:ok, {new(type), rest}}
        error -> error
      end

    @impl true
    def decode_xdr!(bytes, spec \\ @enum_spec)

    def decode_xdr!(bytes, spec) do
      {%XDR.Enum{identifier: type}, rest} = XDR.Enum.decode_xdr!(bytes, spec)
      {new(type), rest}
    end
  end

end
