defmodule MyXDR.One do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `One` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.{Int} 

  @struct_spec XDR.Struct.new(
    someInt: Int
  )

  @type someInt :: Int.t()

  @type t :: %__MODULE__{someInt: someInt()}

  defstruct [:someInt]

  @spec new(someInt :: someInt()) :: t()

  def new(
    %Int{} = someInt
  ),
  do: %__MODULE__{someInt: someInt}

  @impl true
  def encode_xdr(%__MODULE__{someInt: someInt}) do 
    [someInt: someInt]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end 

  @impl true
  def encode_xdr!(%__MODULE__{someInt: someInt}) do 
    [someInt: someInt]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end 

  @impl true 
  def decode_xdr(bytes, struct \\ @struct_spec) 

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [someInt: someInt]}, rest}} -> 
        {:ok, {new(someInt), rest}}
      error -> error
    end
  end 

  @impl true 
  def decode_xdr!(bytes, struct \\ @struct_spec) 

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [someInt: someInt]}, rest} = 
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(someInt), rest}
  end
end
