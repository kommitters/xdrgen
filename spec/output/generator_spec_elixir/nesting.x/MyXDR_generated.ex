defmodule MyXDR do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr
  """

  comment ~S"""
  XDR Source Code::

      enum UnionKey {
        ONE = 1,
        TWO = 2,
        OFFER = 3
      };
  """

  defmodule UnionKey do
    @moduledoc """
    Representation of Stellar `UnionKey` type.
    """

    @behaviour XDR.Declaration

    @declarations [
      ONE: 1,
      TWO: 2,
      OFFER: 3
    ]

    @enum_spec %XDR.Enum{declarations: @declarations, indentifier: nil}

    @type t :: %__MODULE__{identifier: atom()}

    defstruct [:identifier]

    @spec new(type :: atom()) :: t()
    def new(type \\ :ONE), do: %__MODULE__{identifier: type}

    @impl true
    def encode_xdr(%__MODULE__{identifier: type}), do:
      @declarations
      |> XDR.Enum.new(type)
      |> XDR.Enum.encode_xdr()

    @impl true
    def encode_xdr!(%__MODULE__{identifier: type}), do:
      @declarations
      |> XDR.Enum.new(type)
      |> XDR.Enum.encode_xdr!()

    @impl true
    def decode_xdr(bytes, spec \\ @enum_spec)

    def decode_xdr(bytes, spec) do:
      case XDR.Enum.decode_xdr(bytes, spec) do
        {:ok, {%XDR.Enum{identifier: type}, rest}} -> {:ok, {new(type), rest}}
        error -> error
      end

    @impl true
    def decode_xdr!(bytes, spec \\ @enum_spec)

    def decode_xdr!(bytes, spec) do
      {%XDR.Enum{identifier: type}, rest} = XDR.Enum.decode_xdr!(bytes, spec)
      {new(type), rest}
    end
  end

  comment ~S"""
  XDR Source Code::

      typedef int Foo;
  """

  define_type("Foo", Int)

  comment ~S"""
  XDR Source Code::

      struct {
                  int someInt;
              }
  """

  define_type("MyUnionOne", Struct,
    SOME_INT: build_type(Int)
  )

  comment ~S"""
  XDR Source Code::

      struct {
                  int someInt;
                  Foo foo;
              }
  """

  define_type("MyUnionTwo", Struct,
    SOME_INT: build_type(Int),
    FOO: "Foo"
  )

  comment ~S"""
  XDR Source Code::

      union MyUnion switch (UnionKey type)
      {
          case ONE:
              struct {
                  int someInt;
              } one;
      
          case TWO:
              struct {
                  int someInt;
                  Foo foo;
              } two;
      
          case OFFER:
              void;
      };
  """

  define_type("MyUnion", Union,
    switch_type: "UnionKey",
    switch_name: :TYPE,
    switches: [
      {:ONE, :ONE},
      {:TWO, :TWO},
      {:OFFER, XDR.Type.Void},
    ],
    arms: [
      ONE: "MyUnionOne",
      TWO: "MyUnionTwo",
    ]
  )

end
